import cv2
import numpy as np
import math
from cscore import CameraServer, UsbCamera


class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """

    def __init__(self):
        """initializes all values to presets or None if need to be set
        """
        self.desaturate_output = None

        self.__cv_threshold_src = self.desaturate_output
        self.__cv_threshold_thresh = 55.0
        self.__cv_threshold_maxval = 255.0
        self.__cv_threshold_type = cv2.THRESH_BINARY_INV
        self.cv_threshold_output = None

        self.__cv_morphologyex_src = self.cv_threshold_output
        self.__cv_morphologyex_op = cv2.MORPH_DILATE
        self.__cv_morphologyex_kernel = None
        self.__cv_morphologyex_anchor = (-1, -1)
        self.__cv_morphologyex_iterations = 2.0
        self.__cv_morphologyex_bordertype = cv2.BORDER_CONSTANT
        self.__cv_morphologyex_bordervalue = (-1)
        self.cv_morphologyex_output = None

        self.__find_contours_input = self.cv_morphologyex_output
        self.__find_contours_external_only = True
        self.find_contours_output = None

        self.__filter_contours_contours = self.find_contours_output
        self.__filter_contours_min_area = 500.0
        self.__filter_contours_min_perimeter = 0.0
        self.__filter_contours_min_width = 0.0
        self.__filter_contours_max_width = 1000.0
        self.__filter_contours_min_height = 0.0
        self.__filter_contours_max_height = 1000.0
        self.__filter_contours_solidity = [0, 100.0]
        self.__filter_contours_max_vertices = 1000000.0
        self.__filter_contours_min_vertices = 0.0
        self.__filter_contours_min_ratio = 0.0
        self.__filter_contours_max_ratio = 10.0
        self.filter_contours_output = None

    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Desaturate0:
        self.__desaturate_input = source0
        (self.desaturate_output) = self.__desaturate(self.__desaturate_input)
        # Step CV_Threshold0:
        self.__cv_threshold_src = self.desaturate_output
        (self.cv_threshold_output) = self.__cv_threshold(self.__cv_threshold_src, self.__cv_threshold_thresh,
                                                         self.__cv_threshold_maxval, self.__cv_threshold_type)
        # Step CV_morphologyEx0:
        self.__cv_morphologyex_src = self.cv_threshold_output
        (self.cv_morphologyex_output) = self.__cv_morphologyex(self.__cv_morphologyex_src, self.__cv_morphologyex_op,
                                                               self.__cv_morphologyex_kernel,
                                                               self.__cv_morphologyex_anchor,
                                                               self.__cv_morphologyex_iterations,
                                                               self.__cv_morphologyex_bordertype,
                                                               self.__cv_morphologyex_bordervalue)
        # Step Find_Contours0:
        self.__find_contours_input = self.cv_morphologyex_output
        (self.find_contours_output) = self.__find_contours(self.__find_contours_input,
                                                           self.__find_contours_external_only)
        # Step Filter_Contours0:
        self.__filter_contours_contours = self.find_contours_output
        (self.filter_contours_output) = self.__filter_contours(self.__filter_contours_contours,
                                                               self.__filter_contours_min_area,
                                                               self.__filter_contours_min_perimeter,
                                                               self.__filter_contours_min_width,
                                                               self.__filter_contours_max_width,
                                                               self.__filter_contours_min_height,
                                                               self.__filter_contours_max_height,
                                                               self.__filter_contours_solidity,
                                                               self.__filter_contours_max_vertices,
                                                               self.__filter_contours_min_vertices,
                                                               self.__filter_contours_min_ratio,
                                                               self.__filter_contours_max_ratio)
        return self.filter_contours_output

    @staticmethod
    def __desaturate(src):
        """Converts a color image into shades of gray.
        Args:
            src: A color numpy.ndarray.
        Returns:
            A gray scale numpy.ndarray.
        """
        (a, b, channels) = src.shape
        if (channels == 1):
            return np.copy(src)
        elif (channels == 3):
            return cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)
        elif (channels == 4):
            return cv2.cvtColor(src, cv2.COLOR_BGRA2GRAY)
        else:
            raise Exception("Input to desaturate must have 1, 3 or 4 channels")

    @staticmethod
    def __cv_threshold(src, thresh, max_val, type):
        """Apply a fixed-level threshold to each array element in an image
        Args:
            src: A numpy.ndarray.
            thresh: Threshold value.
            max_val: Maximum value for THRES_BINARY and THRES_BINARY_INV.
            type: Opencv enum.
        Returns:
            A black and white numpy.ndarray.
        """
        return cv2.threshold(src, thresh, max_val, type)[1]

    @staticmethod
    def __cv_morphologyex(src, op, kernel, anchor, iterations, border_type, border_value):
        """Expands area of lower value in an image.
        Args:
           src: A numpy.ndarray.
           kernel: The kernel for erosion. A numpy.ndarray.
           iterations: the number of times to erode.
           border_type: Opencv enum that represents a border type.
           border_value: value to be used for a constant border.
        Returns:
            A numpy.ndarray after erosion.
        """
        return cv2.morphologyEx(src, op, kernel, anchor, iterations=(int)(iterations + 0.5),
                                borderType=border_type, borderValue=border_value)

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if (external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        im2, contours, hierarchy = cv2.findContours(input, mode=mode, method=method)
        return contours

    @staticmethod
    def __filter_contours(input_contours, min_area, min_perimeter, min_width, max_width,
                          min_height, max_height, solidity, max_vertex_count, min_vertex_count,
                          min_ratio, max_ratio):
        """Filters out contours that do not meet certain criteria.
        Args:
            input_contours: Contours as a list of numpy.ndarray.
            min_area: The minimum area of a contour that will be kept.
            min_perimeter: The minimum perimeter of a contour that will be kept.
            min_width: Minimum width of a contour.
            max_width: MaxWidth maximum width.
            min_height: Minimum height.
            max_height: Maximimum height.
            solidity: The minimum and maximum solidity of a contour.
            min_vertex_count: Minimum vertex Count of the contours.
            max_vertex_count: Maximum vertex Count.
            min_ratio: Minimum ratio of width to height.
            max_ratio: Maximum ratio of width to height.
        Returns:
            Contours as a list of numpy.ndarray.
        """
        output = []
        for contour in input_contours:
            x, y, w, h = cv2.boundingRect(contour)
            if (w < min_width or w > max_width):
                continue
            if (h < min_height or h > max_height):
                continue
            area = cv2.contourArea(contour)
            if (area < min_area):
                continue
            if (cv2.arcLength(contour, True) < min_perimeter):
                continue
            hull = cv2.convexHull(contour)
            solid = 100 * area / cv2.contourArea(hull)
            if (solid < solidity[0] or solid > solidity[1]):
                continue
            if (len(contour) < min_vertex_count or len(contour) > max_vertex_count):
                continue
            ratio = (float)(w) / h
            if (ratio < min_ratio or ratio > max_ratio):
                continue
            output.append(contour)
        return output


def vision():

    pipe = GripPipeline()
    cs = CameraServer.getInstance()
    usb1 = cs.startAutomaticCapture(dev=0, name="Front")
    usb1.setResolution(1280, 720)
    usb1.setFPS(30)
    usb2 = cs.startAutomaticCapture(dev=1, name="Rear")
    usb2.setResolution(1920, 1080)
    usb2.setFPS(30)
    cvSink = cs.getVideo(name="Front")
    img = np.zeros(shape=(720, 1280, 3), dtype=np.uint8)

    while (1):
        time, frame = cvSink.grabFrame(img)
        tem = pipe.process(frame)
        print(tem)
        cv2.waitKey(1)
    cs.waitForever()


vision()
