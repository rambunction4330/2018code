#include <sys/types.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <iostream>
#include "opencv2/opencv.hpp"

#define PORTNUMBER  9001 
#define DONOTKNOW 1000000

using namespace std;
using namespace cv;

double relativeBearing = DONOTKNOW;
pthread_mutex_t dataLock;

// forward declaration of functions
void *handleClient(void *arg);
void receiveNextCommand(char*, int);
void *capture(void *arg);

int main(void)
{
  int n, s;
  socklen_t len;
  int max;
  int number;
  struct sockaddr_in name;
  pthread_mutex_init(&dataLock, NULL);

  // create the socket
  if ( (s = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    perror("socket");
    exit(1);
  }

  memset(&name, 0, sizeof(struct sockaddr_in));
  name.sin_family = AF_INET;
  name.sin_port = htons(PORTNUMBER);
  len = sizeof(struct sockaddr_in);

  // listen on all network interfaces
  n = INADDR_ANY;
  memcpy(&name.sin_addr, &n, sizeof(long));

  int reuse = 1;
  if (setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (const char*)&reuse, sizeof(reuse)) < 0) {
    perror("setsockopt(SO_REUSEADDR)");
    exit(1);
  }

  if (setsockopt(s, SOL_SOCKET, SO_KEEPALIVE, (const char*)&reuse, sizeof(reuse)) < 0) {
    perror("setsockopt(SO_KEEPALIVE)");
    exit(1);
  }

  // bind socket the network interface
  if (bind(s, (struct sockaddr *) &name, len) < 0) {
    perror("bind");
    exit(1);
  }

  // listen for connections
  if (listen(s, 5) < 0) {
    perror("listen");
    exit(1);
  }
  int i = 3;
 pthread_t captureThreadId;
    int captureThread = pthread_create(&captureThreadId, NULL, capture, (void*)&i);

    //1. Do the Math from pixel to angle 
    //2. Bearing update double(angle) to a string update the thread then destroy thread 
    // it is important to detach the thread since we don't care to join o$
    // and not calling pthread_detach will create a memory leak
    pthread_detach(captureThreadId);


  while(true) {

    // block until get a request
    int ns = accept(s, (struct sockaddr *) &name, &len);

    if ( ns < 0 ) {
      perror("accept");
      exit(1);
    }

    // each client connection is handled by a seperate thread since
    // a single client can hold a connection open indefinitely making multiple
    // data requests prior to closing the connection
    pthread_t threadId;
    int thread = pthread_create(&threadId, NULL, handleClient, (void*) &ns);
    // it is important to detach the thread since we don't care to join on the thread
    // and not calling pthread_detach will create a memory leak
    pthread_detach(threadId);
  } 
  
  close(s);
  exit(0);
}

void *capture(void *arg)
{  
  double Diff, tmp, angle;
  const char* source_filename = "source.jpg";
  const char* binary_filename = "binary.jpg";
  const char* clean_filename = "clean.jpg";
  char this_source_filename[255];
  char this_binary_filename[255];
  char this_clean_filename[255];

  VideoCapture capture(0);
  // want 1920X1080 ?
  capture.set(CV_CAP_PROP_FRAME_WIDTH, 640);
  capture.set(CV_CAP_PROP_FRAME_HEIGHT, 480);
  capture.set(CV_CAP_PROP_FPS, 10);
  if(!capture.isOpened()) {
    cout << "Failed to connect to the camera." << endl;
  }
  Mat frame, framecopy, hsv, binary, tmpBinary, clean;
//Change maxFrames for maximum amount of frames saved.
  
  
  for(int i=0; i==i; i++) {
	double greatestArea = -1;
	double xOfGreatestArea = -1;
		
   // cout << "Frame " << i << endl;
    capture >> frame;
    if(frame.empty()) {
      cout << "failed to capture an image" << endl;
    }
    framecopy = frame.clone();
    //sprintf(this_source_filename, "%d%s", i, source_filename);
   // imwrite(this_source_filename, framecopy);
    
    cvtColor(framecopy, hsv, CV_BGR2HSV);
    inRange(hsv, Scalar(30,22,158), Scalar(105,255,255), binary);
    //sprintf(this_binary_filename, "%d%s", i, binary_filename);
   //imwrite(this_binary_filename, binary);

    std::vector < std::vector<Point> > contours;
    //std::vector < std::vector<Point> > filteredContours;
    tmpBinary = binary.clone();
    findContours(tmpBinary, contours, RETR_LIST, CHAIN_APPROX_NONE);
    tmpBinary.release();
    //cvtColor( binary, clean, CV_GRAY2RGB );
    //clean.setTo(Scalar(255,255,255));
    //garea = greatest area
    
    for (size_t contourIdx = 0; contourIdx < contours.size(); contourIdx++) {
      //Point2d center;
      Moments moms = moments(Mat(contours[contourIdx]));

      // filter blobs which are too small
      double area = moms.m00;
      if ( area < 300 ) {
        continue;
      }
      if(area > greatestArea){
		greatestArea = area;
		xOfGreatestArea = moms.m10 / moms.m00;
      }
      //center  = Point2d(moms.m10 / moms.m00, moms.m01 / moms.m00);
     // circle(clean, center, 2, Scalar(0), 2, 8, 0);
      //filteredContours.push_back(contours[contourIdx]);
    }
    
    angle = DONOTKNOW;
    if ( xOfGreatestArea != -1 ) {
       Diff = xOfGreatestArea - 320;
	  //tmp = sqrt((640*640)+(480*480));
	  angle = Diff*60/640;
    }
   cout << "x value of the greatest area = "  << xOfGreatestArea << endl;
   cout << "angle = " << angle << endl; 
    // obtain the lock and copy the data
      pthread_mutex_lock(&dataLock);
      relativeBearing = angle;
      pthread_mutex_unlock(&dataLock);

    //drawContours( clean, filteredContours, -1, Scalar(0,255,0) );
    //sprintf(this_clean_filename, "%d%s", i, clean_filename);
   // imwrite(this_clean_filename, clean);
  }
}



void *handleClient(void *arg) {
  // printf("Thread starting\n");
  int ns = *((int*) arg);
  char sendbuffer[1024];
  char command[128];

  // start conversation with client
  while(true) {

    receiveNextCommand(command, ns);

    if ( strcmp(command, "STOP") == 0 ) {
      //printf("Received STOP command\n");
      break;
    } else if ( strcmp(command, "DATA") == 0 ) {
      //printf("Received DATA command\n");

      // obtain the lock and copy the data
      pthread_mutex_lock(&dataLock);
      double copyRelativeBearing = relativeBearing;
      pthread_mutex_unlock(&dataLock);
      
      // the protocol will send an empty line when the data transfer is complete
      int sendbufferLen = -1;
      if ( copyRelativeBearing == DONOTKNOW ) {
		  sendbufferLen = sprintf(sendbuffer, "\n");
	  } else {
		  sendbufferLen = sprintf(sendbuffer, "rb=%.1f\n\n", copyRelativeBearing);
	  }

      // write response to client
      write(ns, sendbuffer, sendbufferLen);
    } else {
      //printf("Received unknown command '%s'\n", command);
      break;
    }

  }
  close(ns);
  //printf("Thread ending\n");
  return 0;
}

void receiveNextCommand(char *command, int ns) {
  int receiveLength = read(ns, command, 1024);
  int commandLength = 0;
  while(commandLength < receiveLength) {
    char value = command[commandLength];
    if ( value == 0x0d || value == 0x0a ) {
      break;
    } 
    commandLength++;
  }

  // add the terminating 0 to mark the end of the string value in the char *
  command[commandLength] = 0;
}

